#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–∏–≥–∏.
–í–∫–ª—é—á–∞–µ—Ç –¥–≤–∞ –º–µ—Ç–æ–¥–∞: 
1. –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞—Ç–∞—Å–µ—Ç–∞ –æ—Ü–µ–Ω–æ–∫ –∫–Ω–∏–≥
2. –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI GPT API
"""

import os
import logging
import json
import pandas as pd
import numpy as np
from pathlib import Path
from openai import AsyncOpenAI
from dotenv import load_dotenv
from rapidfuzz import process
from sklearn.metrics.pairwise import cosine_similarity

from models.book import Book

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
DATA_DIR = Path(__file__).parent.parent.parent / "data"
RATINGS_FILE = DATA_DIR / "book_ratings.csv"
BOOKS_FILE = DATA_DIR / "books.csv"

async def recommend_books(book_query: str, num_recommendations: int = 3) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏,
    –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–±–æ –¥–∞—Ç–∞—Å–µ—Ç –æ—Ü–µ–Ω–æ–∫, –ª–∏–±–æ OpenAI GPT API.
    
    Args:
        book_query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏)
        num_recommendations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if RATINGS_FILE.exists() and BOOKS_FILE.exists():
            return await recommend_books_collaborative(book_query, num_recommendations)
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT API
            return await recommend_books_gpt(book_query, num_recommendations)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")

def find_closest_book_title(query, titles, threshold=75):
    """
    –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ.
    
    Args:
        query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏)
        titles: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–∏–≥
        threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ –≤–∑—è—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ 75)
        
    Returns:
        –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ None, –µ—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
    """

    match, score, idx = process.extractOne(query, titles)
    if score >= threshold:
        return titles[idx]
    else:
        return None

async def recommend_books_collaborative(book_query: str, num_recommendations: int = 3) -> str:
    """
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        book_query: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        num_recommendations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """

    title_name_in_dataset = 'original_title'

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        books_df = pd.read_csv(BOOKS_FILE)
        ratings_df = pd.read_csv(RATINGS_FILE)

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
        book_matches = books_df[books_df[title_name_in_dataset].str.contains(book_query, case=False)]

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
        if book_matches.empty:
            closest_title = find_closest_book_title(book_query, books_df[title_name_in_dataset].tolist())
            if closest_title:
                book_matches = books_df[books_df[title_name_in_dataset] == closest_title]

        if book_matches.empty:
            return await recommend_books_gpt(book_query, num_recommendations)

        book_id = book_matches.iloc[0]['book_id']

        ratings_matrix = ratings_df.pivot_table(index='user_id', columns='book_id', values='rating').fillna(0)
        book_vectors = ratings_matrix.T

        if book_id not in book_vectors.index:
            return await recommend_books_gpt(book_query, num_recommendations)

        target_vector = book_vectors.loc[[book_id]]
        similarities = cosine_similarity(target_vector, book_vectors)[0]

        similarities_df = pd.DataFrame({
            'book_id': book_vectors.index,
            'similarity': similarities
        }).sort_values('similarity', ascending=False)

        similarities_df = similarities_df[similarities_df['book_id'] != book_id]
        top_books = similarities_df.head(num_recommendations)

        recommended_books = books_df[books_df['book_id'].isin(top_books['book_id'])]
        result_df = pd.merge(recommended_books, top_books, on='book_id')

        result = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏ '{book_matches.iloc[0]['title']}' —Ä–µ–∫–æ–º–µ–Ω–¥—É—é (–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫–æ–≤–∏–∫):\n\n"

        for i, (_, row) in enumerate(result_df.iterrows(), 1):
            book = Book(
                title=row['title'],
                authors=row.get('authors', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                year=row.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                description=row.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                genre=row.get('genre', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            )
            result += f"{i}. üìö {book.to_string()}\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–æ–∫ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {row['similarity']:.2f}\n\n"

        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: {e}")
        return await recommend_books_gpt(book_query, num_recommendations)

async def recommend_books_gpt(book_query: str, num_recommendations: int = 3) -> str:
    """
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI GPT API.
    
    Args:
        book_query: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        num_recommendations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ GPT API
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫ GPT API –¥–ª—è –∫–Ω–∏–≥–∏: {book_query}")

        instructions = """
            –¢—ã - –∫–Ω–∏–∂–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å {num_recommendations} –∫–Ω–∏–≥, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –∫–Ω–∏–≥—É,
            —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∂–∞–Ω—Ä–∞, —Å—Ç–∏–ª—è, —Ç–µ–º—ã –∏ —Ç.–¥.

            –î–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ —É–∫–∞–∂–∏:
            - –ù–∞–∑–≤–∞–Ω–∏–µ
            - –ê–≤—Ç–æ—Ä
            - –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è
            - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 100 —Å–ª–æ–≤)
            - –ñ–∞–Ω—Ä
            - –ü–æ—á–µ–º—É –æ–Ω–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {{
                "original_book": {{
                    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏",
                    "authors": "–ê–≤—Ç–æ—Ä—ã –∏—Å—Ö–æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: <–ê–≤—Ç–æ—Ä_1, –ê–≤—Ç–æ—Ä_2>"
                }},
                "recommendations": [
                    {{
                        "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏",
                        "authors": "–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏",
                        "year": "–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è",
                        "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                        "genre": "–ñ–∞–Ω—Ä",
                        "similarity": "–ü–æ—á–µ–º—É –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –∫–Ω–∏–≥—É"
                    }}
                ]
            }}
        """
        
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "developer", "content": instructions},
                {"role": "user", "content": f"–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∫–Ω–∏–≥–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ '{book_query}'"}
            ],
            # temperature=0.7,
            response_format={"type": "json_object"}
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        content = response.choices[0].message.content
        
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        data = json.loads(content)
        original_book = data.get("original_book", {})
        recommendations = data.get("recommendations", [])
        
        if not recommendations:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ –∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–Ω–∏–≥—É."
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        result = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏ '{original_book.get('title', book_query)}' "
        if original_book.get('authors'):
            result += f"–∞–≤—Ç–æ—Ä–æ–≤ {original_book.get('authors')} "
        result += "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n"
        
        for i, rec_data in enumerate(recommendations, 1):
            book = Book(
                title=rec_data.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                authors=rec_data.get("authors", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                year=rec_data.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                description=rec_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"),
                genre=rec_data.get("genre", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            )
            result += f"{i}. üìö {book.to_string()}\n"
            if rec_data.get("similarity"):
                result += f"–ß–µ–º –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–Ω–∏–≥—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {rec_data.get('similarity')}\n"
            result += "\n"
        
        return result
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫ GPT API: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}") 