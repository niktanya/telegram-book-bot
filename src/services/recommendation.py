#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–∏–≥–∏.
–í–∫–ª—é—á–∞–µ—Ç –¥–≤–∞ –º–µ—Ç–æ–¥–∞: 
1. –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞—Ç–∞—Å–µ—Ç–∞ –æ—Ü–µ–Ω–æ–∫ –∫–Ω–∏–≥
2. –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI GPT API
"""

import os
import logging
import json
import pandas as pd
import numpy as np
from pathlib import Path
from openai import AsyncOpenAI

from models.book import Book

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
DATA_DIR = Path(__file__).parent.parent.parent / "data"
RATINGS_FILE = DATA_DIR / "book_ratings.csv"
BOOKS_FILE = DATA_DIR / "books.csv"

async def recommend_books(book_query: str, num_recommendations: int = 5) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–Ω–∏–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏,
    –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–±–æ –¥–∞—Ç–∞—Å–µ—Ç –æ—Ü–µ–Ω–æ–∫, –ª–∏–±–æ OpenAI GPT API.
    
    Args:
        book_query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏)
        num_recommendations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if RATINGS_FILE.exists() and BOOKS_FILE.exists():
            return await recommend_books_collaborative(book_query, num_recommendations)
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT API
            return await recommend_books_gpt(book_query, num_recommendations)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")

async def recommend_books_collaborative(book_query: str, num_recommendations: int = 5) -> str:
    """
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        book_query: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        num_recommendations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        books_df = pd.read_csv(BOOKS_FILE)
        ratings_df = pd.read_csv(RATINGS_FILE)
        
        # –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ
        book_matches = books_df[books_df['title'].str.contains(book_query, case=False)]
        
        if book_matches.empty:
            # –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT API
            return await recommend_books_gpt(book_query, num_recommendations)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É
        book_id = book_matches.iloc[0]['book_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É –∫–Ω–∏–≥—É
        users_who_read = ratings_df[ratings_df['book_id'] == book_id]['user_id'].unique()
        
        # –ï—Å–ª–∏ –º–∞–ª–æ –æ—Ü–µ–Ω–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT API
        if len(users_who_read) < 5:
            return await recommend_books_gpt(book_query, num_recommendations)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–∏—Ç–∞–ª–∏ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        other_books = ratings_df[ratings_df['user_id'].isin(users_who_read) & 
                             (ratings_df['book_id'] != book_id)]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–Ω–∏–≥–∞–º –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
        book_stats = other_books.groupby('book_id').agg({
            'rating': ['mean', 'count']
        }).reset_index()
        book_stats.columns = ['book_id', 'avg_rating', 'rating_count']
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ü–µ–Ω–æ–∫
        min_ratings = 3
        filtered_books = book_stats[book_stats['rating_count'] >= min_ratings]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ
        recommended_books = filtered_books.sort_values('avg_rating', ascending=False).head(num_recommendations)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–∏–≥–∞—Ö
        result_df = pd.merge(recommended_books, books_df, on='book_id')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏ '{book_matches.iloc[0]['title']}' —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n"
        
        for i, (_, row) in enumerate(result_df.iterrows(), 1):
            book = Book(
                title=row['title'],
                author=row.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                year=row.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                description=row.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                genre=row.get('genre', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            )
            result += f"{i}. üìö {book.to_string()}\n–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {row['avg_rating']:.2f} (–Ω–∞ –æ—Å–Ω–æ–≤–µ {row['rating_count']} –æ—Ü–µ–Ω–æ–∫)\n\n"
        
        return result
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT API
        return await recommend_books_gpt(book_query, num_recommendations)

async def recommend_books_gpt(book_query: str, num_recommendations: int = 5) -> str:
    """
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI GPT API.
    
    Args:
        book_query: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        num_recommendations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ GPT API
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫ GPT API –¥–ª—è –∫–Ω–∏–≥–∏: {book_query}")
        
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": f"""
                –¢—ã - –∫–Ω–∏–∂–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å {num_recommendations} –∫–Ω–∏–≥, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –∫–Ω–∏–≥—É,
                —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∂–∞–Ω—Ä–∞, —Å—Ç–∏–ª—è, —Ç–µ–º—ã –∏ —Ç.–¥.
                
                –î–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ —É–∫–∞–∂–∏:
                - –ù–∞–∑–≤–∞–Ω–∏–µ
                - –ê–≤—Ç–æ—Ä
                - –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è
                - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 100 —Å–ª–æ–≤)
                - –ñ–∞–Ω—Ä
                - –ü–æ—á–µ–º—É –æ–Ω–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
                
                –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                {{
                    "original_book": {{
                        "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏",
                        "author": "–ê–≤—Ç–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏"
                    }},
                    "recommendations": [
                        {{
                            "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏",
                            "author": "–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏",
                            "year": "–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è",
                            "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                            "genre": "–ñ–∞–Ω—Ä",
                            "similarity": "–ü–æ—á–µ–º—É –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –∫–Ω–∏–≥—É"
                        }}
                    ]
                }}
                """},
                {"role": "user", "content": f"–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∫–Ω–∏–≥–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ '{book_query}'"}
            ],
            temperature=0.7,
            response_format={"type": "json_object"}
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        content = response.choices[0].message.content
        
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        data = json.loads(content)
        original_book = data.get("original_book", {})
        recommendations = data.get("recommendations", [])
        
        if not recommendations:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ –∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–Ω–∏–≥—É."
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        result = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏ '{original_book.get('title', book_query)}' "
        if original_book.get('author'):
            result += f"–∞–≤—Ç–æ—Ä–∞ {original_book.get('author')} "
        result += "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n"
        
        for i, rec_data in enumerate(recommendations, 1):
            book = Book(
                title=rec_data.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                author=rec_data.get("author", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                year=rec_data.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                description=rec_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"),
                genre=rec_data.get("genre", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            )
            result += f"{i}. üìö {book.to_string()}\n"
            if rec_data.get("similarity"):
                result += f"–ü–æ—á–µ–º—É –ø–æ—Ö–æ–∂–∞: {rec_data.get('similarity')}\n"
            result += "\n"
        
        return result
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫ GPT API: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}") 