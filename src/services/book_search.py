#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI GPT API.
"""

import os
import logging
import json
from openai import AsyncOpenAI

from models.book import Book

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

async def search_book(query: str) -> str:
    """
    –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ OpenAI GPT API.
    
    Args:
        query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø–∏—Å–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏)
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ–∏—Å–∫–∞
    """
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ GPT API
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT API: {query}")
        
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": """
                –¢—ã - –∫–Ω–∏–∂–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                –ó–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—é–∂–µ—Ç–∞, –∞–≤—Ç–æ—Ä–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.
                –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–∏ –¥–æ 3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–Ω–∏–≥.
                –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ —É–∫–∞–∂–∏:
                - –ù–∞–∑–≤–∞–Ω–∏–µ
                - –ê–≤—Ç–æ—Ä
                - –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è
                - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 100 —Å–ª–æ–≤)
                - –ñ–∞–Ω—Ä
                
                –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                {
                    "books": [
                        {
                            "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏",
                            "author": "–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏",
                            "year": "–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è",
                            "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                            "genre": "–ñ–∞–Ω—Ä"
                        }
                    ]
                }
                """},
                {"role": "user", "content": query}
            ],
            temperature=0.7,
            response_format={"type": "json_object"}
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        content = response.choices[0].message.content
        
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        data = json.loads(content)
        books = data.get("books", [])
        
        if not books:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        result = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n"
        for i, book_data in enumerate(books, 1):
            book = Book(
                title=book_data.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                author=book_data.get("author", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                year=book_data.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                description=book_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"),
                genre=book_data.get("genre", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            )
            result += f"{i}. üìö {book.to_string()}\n\n"
        
        return result
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT API: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏: {e}") 