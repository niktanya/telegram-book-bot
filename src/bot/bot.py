#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API.
"""

import logging
import os
import json
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)

from services.book_search import search_book
from services.recommendation import recommend_books
from services.database import add_book, add_rating, get_book_rating, get_user_ratings, get_book_by_id

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
SEARCH, CHOOSE_BOOK, RECOMMEND_FROM_RATE, RECOMMEND_DIRECT, RATE, CHOOSE_RATING = range(6)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –§–æ—Ä–º–∞—Ç: "123456789,987654321"
ALLOWED_USERS = os.getenv("ALLOWED_USERS", "")
allowed_user_ids = [int(user_id.strip()) for user_id in ALLOWED_USERS.split(",") if user_id.strip()] if ALLOWED_USERS else []

# –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CHECK_USERS = bool(allowed_user_ids) and os.getenv("ENVIRONMENT") == "production"

async def check_user(update: Update) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        
    Returns:
        True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø, –∏–Ω–∞—á–µ False
    """
    if not CHECK_USERS:
        return True
    
    user_id = update.effective_user.id
    return user_id in allowed_user_ids

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not await check_user(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/search - –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, –∞–≤—Ç–æ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "/recommend - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏\n"
        "/rate - –û—Ü–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É (–ø–æ–∏—Å–∫ + –æ—Ü–µ–Ω–∫–∞)\n"
        "/myratings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not await check_user(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await update.message.reply_text(
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥–∏, –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/search - –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, –∞–≤—Ç–æ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "/recommend - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏\n"
        "/rate - –û—Ü–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É (–ø–æ–∏—Å–∫ + –æ—Ü–µ–Ω–∫–∞)\n"
        "/myratings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –∏–ª–∏ /rate –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "3. –ü—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∫–Ω–∏–≥–∏ (/rate) –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "   - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥\n"
        "   - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myratings —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏"
    )

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    if not await check_user(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
    context.user_data.clear()
    context.user_data['search_attempts'] = 0
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏."
    )
    return SEARCH

async def process_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏"""
    if not await check_user(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    user_query = update.message.text
    search_attempts = context.user_data.get('search_attempts', 0)
    
    if search_attempts >= 2:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–∏–≥—É –ø–æ—Å–ª–µ –¥–≤—É—Ö –ø–æ–ø—ã—Ç–æ–∫. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /search"
        )
        return ConversationHandler.END
    
    await update.message.reply_text("–ò—â—É –∫–Ω–∏–≥—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['last_query'] = user_query
        context.user_data['search_attempts'] = search_attempts + 1
        
        # –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥
        result, books_data = await search_book(user_query, context.user_data.get('excluded_books', []))
        
        if not books_data:
            await update.message.reply_text(result)
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['found_books'] = books_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏
        keyboard = []
        for i, book in enumerate(books_data, 1):
            keyboard.append([f"{i}. {book['title_ru']}"])
        keyboard.append(["üîç –ò—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            f"{result}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ò—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.",
            reply_markup=reply_markup
        )
        return CHOOSE_BOOK
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

async def process_book_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    if not await check_user(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    choice = update.message.text
    books_data = context.user_data.get('found_books', [])
    
    if choice == "üîç –ò—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑":
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–Ω–∏–≥–∏ –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ
        excluded_books = context.user_data.get('excluded_books', [])
        excluded_books.extend([book['title_en'] for book in books_data])
        context.user_data['excluded_books'] = excluded_books
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É —Å —Ç–µ–º –∂–µ –∑–∞–ø—Ä–æ—Å–æ–º
        return await process_search(update, context)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
        book_index = int(choice.split('.')[0]) - 1
        if 0 <= book_index < len(books_data):
            selected_book = books_data[book_index]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_book'] = selected_book
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç
            book_id = add_book(selected_book)
            context.user_data['selected_book_id'] = book_id
            
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–∏–≥—É: {selected_book['title_ru']}\n\n",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            if context.user_data.get('mode') == 'rate':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ü–µ–Ω–∫–∞
                user_id = update.effective_user.id
                existing_rating = get_book_rating(book_id, user_id)
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                keyboard = []
                for i in range(1, 6):
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{i} {'‚≠ê' * i}",
                            callback_data=f"rate_{i}"
                        )
                    ])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if existing_rating:
                    await update.message.reply_text(
                        f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏: {existing_rating} {'‚≠ê' * existing_rating}\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É:",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        "–û—Ü–µ–Ω–∏—Ç–µ –∫–Ω–∏–≥—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:",
                        reply_markup=reply_markup
                    )
                return RATE
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
                keyboard = [["–î–∞, –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"], ["–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                await update.message.reply_text(
                    "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∫–Ω–∏–≥–∏?",
                    reply_markup=reply_markup
                )
                return RECOMMEND_FROM_RATE
            
    except (ValueError, IndexError):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ò—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑'."
        )
        return CHOOSE_BOOK

async def process_recommendation_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏"""
    if not await check_user(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    choice = update.message.text
    selected_book = context.user_data.get('selected_book')
    
    if choice == "–î–∞, –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" and selected_book:
        await update.message.reply_text(
            "–ò—â—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            result = await recommend_books(selected_book['title_en'], 3)
            await update.message.reply_text(result)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
            )
    else:
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –∫–Ω–∏–≥—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search",
            reply_markup=ReplyKeyboardRemove()
        )
    
    return ConversationHandler.END

async def process_recommend(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥.
    """
    try:
        book_query = update.message.text.strip()
        if not book_query:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            return RECOMMEND_DIRECT

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = await recommend_books(book_query)

        if not recommendations:
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ /search."
            )
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        message = "üìö –í–æ—Ç –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:\n\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –Ω–∞–ª–∏—á–∏—é —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏
        first_book = recommendations[0] if recommendations else {}
        similarity = first_book.get('similarity', 0)
        
        if isinstance(similarity, float) and similarity > 0:
            message = "üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–æ–∫ –¥—Ä—É–≥–∏—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π:\n\n"
        else:
            message = "ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ü–µ–Ω–æ–∫ –¥—Ä—É–≥–∏—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏. –í–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç GPT:\n\n"
        
        for i, book in enumerate(recommendations, 1):
            # –¢–µ–ø–µ—Ä—å book - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç recommend_books
            title = book.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            authors = book.get('authors', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            year = book.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            description = book.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            genre = book.get('genre', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            similarity = book.get('similarity', 0)

            message += (
                f"{i}. <b>{title}</b>\n"
                f"üë§ –ê–≤—Ç–æ—Ä—ã: {authors}\n"
                f"üìÖ –ì–æ–¥: {year}\n"
                f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üè∑ –ñ–∞–Ω—Ä: {genre}\n"
            )
            message += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥
        keyboard = []
        for i, book in enumerate(recommendations):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ book_id —É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ –∏ –æ–Ω –Ω–µ None
            if 'book_id' in book and book['book_id'] is not None:
                keyboard.append([
                    InlineKeyboardButton(f"–û—Ü–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É {i+1}", callback_data=f"rate_rec_{book['book_id']}")
                ])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑" –∏ "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        keyboard.append([
            InlineKeyboardButton("–ò—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="search_again"),
            InlineKeyboardButton("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="thanks_recommendations")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['current_recommendations'] = recommendations
        
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ /search."
        )
        return ConversationHandler.END

async def rate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rate"""
    if not await check_user(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
    context.user_data.clear()
    context.user_data['search_attempts'] = 0
    context.user_data['mode'] = 'rate'  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å."
    )
    return SEARCH

async def process_rating_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏ —Å –∫–Ω–æ–ø–∫–∏
    
    if not await check_user(update):
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    try:
        data_parts = query.data.split('_')
        action = data_parts[0]

        if action == 'rate': # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞
            rating = int(data_parts[1])
            if 1 <= rating <= 5:
                book_id = context.user_data.get('selected_book_id') # –ë–µ—Ä–µ–º book_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                user_id = query.from_user.id
                
                if book_id is None:
                     await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–Ω–∏–≥—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")
                     return ConversationHandler.END

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
                add_rating(book_id, user_id, rating)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π
                await query.message.edit_text(
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–Ω–∏–≥–µ {rating} {'‚≠ê' * rating}"
                )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                keyboard = [["–î–∞, –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"], ["–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                await query.message.reply_text(
                    "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∫–Ω–∏–≥–∏?",
                    reply_markup=reply_markup
                )
                return RECOMMEND_FROM_RATE

        elif action == 'rate_rec': # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
             if len(data_parts) == 2:
                 book_id = int(data_parts[1])
                 user_id = query.from_user.id

                 # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
                 keyboard = []
                 for i in range(1, 6):
                     keyboard.append([
                         InlineKeyboardButton(
                             f"{i} {'‚≠ê' * i}",
                             callback_data=f"rate_book_{book_id}_{i}" # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: rate_book_<book_id>_<rating>
                         )
                     ])
                 reply_markup = InlineKeyboardMarkup(keyboard)

                 # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ü–µ–Ω–∫–∏
                 # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ, –∫–æ—Ç–æ—Ä—É—é –æ—Ü–µ–Ω–∏–≤–∞–µ–º
                 book_data = get_book_by_id(book_id)
                 book_title = book_data.get('title_ru', '–∫–Ω–∏–≥–∏') if book_data else '–∫–Ω–∏–≥–∏'

                 await query.message.edit_text(
                     f"–û—Ü–µ–Ω–∏—Ç–µ –∫–Ω–∏–≥—É \"{book_title}\" –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:",
                     reply_markup=reply_markup
                 )
                 # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ RATE (–∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                 return RATE # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ RATE –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
             else:
                 await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
                 return ConversationHandler.END


        elif action == 'rate_book': # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
             if len(data_parts) == 3:
                  book_id = int(data_parts[1])
                  rating = int(data_parts[2])
                  user_id = query.from_user.id

                  if 1 <= rating <= 5:
                       # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
                       add_rating(book_id, user_id, rating)

                       # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π
                       book_data = get_book_by_id(book_id)
                       book_title = book_data.get('title_ru', '–∫–Ω–∏–≥–∏') if book_data else '–∫–Ω–∏–≥–∏'

                       await query.message.edit_text(
                            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–Ω–∏–≥–µ \"{book_title}\" {rating} {'‚≠ê' * rating}"
                       )
                       # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∫–Ω–∏–≥–∏
                       keyboard = [["–î–∞, –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"], ["–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ"]]
                       reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                       await query.message.reply_text(
                           "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∫–Ω–∏–≥–∏?",
                           reply_markup=reply_markup
                       )
                       return RECOMMEND_FROM_RATE
                  else:
                       await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏.")
                       return ConversationHandler.END
             else:
                 await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
                 return ConversationHandler.END


        elif query.data == "search_again": # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –µ—â–µ —Ä–∞–∑" –ø–æ—Å–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
             # –õ–æ–≥–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ process_book_choice, –Ω—É–∂–Ω–æ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
             # –≠—Ç–æ —Å–ª–æ–∂–Ω–µ–µ, —Ç–∞–∫ –∫–∞–∫ process_book_choice –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥, –∞ —Ç—É—Ç callback
             # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–æ—Å–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /search
             await query.message.reply_text("–ù–∞–∂–º–∏—Ç–µ /search, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞.") # –ò–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É process_search
             return ConversationHandler.END

        elif query.data == "thanks_recommendations": # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
             await query.message.edit_text(
                 "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –∫–Ω–∏–≥—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search"
             )
             return ConversationHandler.END

    except (ValueError, IndexError):
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

async def my_ratings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myratings"""
    if not await check_user(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    user_id = update.effective_user.id
    ratings = get_user_ratings(user_id)
    
    if not ratings:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /rate –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ü–µ–Ω–æ–∫
    result = "–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥:\n\n"
    for rating_data in ratings:
        result += (
            f"üìö *{rating_data['title_ru']}*\n"
            f"–ê–≤—Ç–æ—Ä—ã: {rating_data['authors_ru']}\n"
            f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating_data['rating']} {'‚≠ê' * rating_data['rating']}\n"
            f"–ñ–∞–Ω—Ä: {rating_data['genre']}\n\n"
        )
    
    await update.message.reply_text(result)

async def recommend_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommend"""
    if not await check_user(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    )
    return RECOMMEND_DIRECT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    if not await check_user(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def run_bot(token: str) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("search", search_command),
            CommandHandler("recommend", recommend_command),
            CommandHandler("rate", rate_command)
        ],
        states={
            SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_search)],
            CHOOSE_BOOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_book_choice)],
            RECOMMEND_FROM_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_recommendation_choice)],
            RECOMMEND_DIRECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_recommend)],
            RATE: [
                CallbackQueryHandler(process_rating_callback, pattern=r"^rate_\d+$"),
                CallbackQueryHandler(process_rating_callback, pattern=r"^rate_rec_\d+$"),
                CallbackQueryHandler(process_rating_callback, pattern=r"^rate_book_\d+_\d+$"),
                CallbackQueryHandler(process_rating_callback, pattern=r"^search_again$"),
                CallbackQueryHandler(process_rating_callback, pattern=r"^thanks_recommendations$")
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("myratings", my_ratings_command))
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if CHECK_USERS:
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {allowed_user_ids}")
    else:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
    
    application.run_polling() 